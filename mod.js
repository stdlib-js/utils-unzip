// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./mod.d.ts" />
var r="function"==typeof Object.defineProperty?Object.defineProperty:null;var e=function(){try{return r({},"x",{}),!0}catch(r){return!1}},t=Object.defineProperty,n=Object.prototype,o=n.toString,a=n.__defineGetter__,i=n.__defineSetter__,u=n.__lookupGetter__,l=n.__lookupSetter__;var c=t,f=function(r,e,t){var c,f,y,v;if("object"!=typeof r||null===r||"[object Array]"===o.call(r))throw new TypeError("invalid argument. First argument must be an object. Value: `"+r+"`.");if("object"!=typeof t||null===t||"[object Array]"===o.call(t))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+t+"`.");if((f="value"in t)&&(u.call(r,e)||l.call(r,e)?(c=r.__proto__,r.__proto__=n,delete r[e],r[e]=t.value,r.__proto__=c):r[e]=t.value),y="get"in t,v="set"in t,f&&(y||v))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return y&&a&&a.call(r,e,t.get),v&&i&&i.call(r,e,t.set),r},y=e()?c:f;var v=function(r,e,t){y(r,e,{configurable:!1,enumerable:!1,writable:!1,value:t})};var p=function(r){return"number"==typeof r};var b=function(){return"function"==typeof Symbol&&"symbol"==typeof Symbol("foo")}();var s=function(){return b&&"symbol"==typeof Symbol.toStringTag},m=Object.prototype.toString,_=m;var d=function(r){return _.call(r)},g=Object.prototype.hasOwnProperty;var h=function(r,e){return null!=r&&g.call(r,e)},w="function"==typeof Symbol?Symbol.toStringTag:"",j=h,A=w,S=m;var O=d,T=function(r){var e,t,n;if(null==r)return S.call(r);t=r[A],e=j(r,A);try{r[A]=void 0}catch(e){return S.call(r)}return n=S.call(r),e?r[A]=t:delete r[A],n},E=s()?T:O,I=Number,P=I.prototype.toString;var N=E,V=I,x=function(r){try{return P.call(r),!0}catch(r){return!1}},F=s();var G=function(r){return"object"==typeof r&&(r instanceof V||(F?x(r):"[object Number]"===N(r)))},M=p,k=G;var Y=v,z=function(r){return M(r)||k(r)},C=G;Y(z,"isPrimitive",p),Y(z,"isObject",C);var q=z,B=Number.POSITIVE_INFINITY,D=I.NEGATIVE_INFINITY,H=Math.floor;var J=B,K=D,L=function(r){return H(r)===r};var Q=function(r){return r<J&&r>K&&L(r)},R=q.isPrimitive,U=Q;var W=function(r){return R(r)&&U(r)},X=q.isObject,Z=Q;var $=function(r){return X(r)&&Z(r.valueOf())},rr=W,er=$;var tr=v,nr=function(r){return rr(r)||er(r)},or=$;tr(nr,"isPrimitive",W),tr(nr,"isObject",or);var ar,ir=nr,ur=E;ar=Array.isArray?Array.isArray:function(r){return"[object Array]"===ur(r)};var lr=ir,cr=ar;var fr=function(r,e){var t,n,o,a,i,u,l;if(!cr(r))throw new TypeError("invalid argument. Must provide a zipped array.");for(n=r.length,i=0;i<n;i++)if(!cr(r[i]))throw new TypeError("invalid argument. Array must only contain arrays.");if(t=r[0].length,arguments.length>1){if(!cr(e))throw new TypeError("invalid argument. Indices must be specified as an array.");for(i=0;i<e.length;i++){if(l=e[i],!lr(l))throw new TypeError("invalid argument. All indices must be integers.");if(l<0||l>t)throw new Error("invalid argument. Must provide valid indices; i.e., an index must be on the interval [0,len], where len is the tuple length.")}t=e.length}else for(e=new Array(t),i=0;i<t;i++)e[i]=i;for(o=new Array(t),u=0;u<t;u++){for(a=new Array(n),l=e[u],i=0;i<n;i++)a[i]=r[i][l];o[u]=a}return o};export{fr as default};
//# sourceMappingURL=mod.js.map
