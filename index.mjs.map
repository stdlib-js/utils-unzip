{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n// MODULES //\n\nimport isInteger from '@stdlib/assert-is-integer';\n\nimport isArray from '@stdlib/assert-is-array';\n\n// MAIN //\n\n/**\n* Unzips a zipped array (i.e., a nested array of tuples).\n*\n* @param {Array} arr - zipped array\n* @param {Array} [idx] - array of indices specifying which tuple elements to unzip\n* @throws {TypeError} first argument must be a zipped array\n* @throws {TypeError} second argument must be an array of integer indices\n* @throws {Error} indices must be on the interval from zero to the tuple length\n* @returns {Array} array of unzipped arrays\n*\n* @example\n* var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n*\n* var out = unzip( arr );\n* // returns [ [ 1, 2 ], [ 'a', 'b' ], [ 3, 4 ] ]\n*\n* @example\n* var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n*\n* var out = unzip( arr, [ 0, 2 ] );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*/\nfunction unzip( arr, idx ) {\n\tvar numVals;\n\tvar len;\n\tvar out;\n\tvar tmp;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isArray( arr ) ) {\n\t\tthrow new TypeError( format('1YH1s') );\n\t}\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( !isArray( arr[i] ) ) {\n\t\t\tthrow new TypeError( format('1YH1t') );\n\t\t}\n\t}\n\t// Assume that the first tuple is representative of all tuples...\n\tnumVals = arr[ 0 ].length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isArray( idx ) ) {\n\t\t\tthrow new TypeError( format('1YH1u') );\n\t\t}\n\t\tfor ( i = 0; i < idx.length; i++ ) {\n\t\t\tk = idx[ i ];\n\t\t\tif ( !isInteger( k ) ) {\n\t\t\t\tthrow new TypeError( format('1YH1v') );\n\t\t\t}\n\t\t\tif ( k < 0 || k > numVals ) {\n\t\t\t\tthrow new Error( format('1YHD4') );\n\t\t\t}\n\t\t}\n\t\tnumVals = idx.length;\n\t} else {\n\t\tidx = [];\n\t\tfor ( i = 0; i < numVals; i++ ) {\n\t\t\tidx.push( i );\n\t\t}\n\t}\n\tout = [];\n\tfor ( j = 0; j < numVals; j++ ) {\n\t\ttmp = [];\n\t\tk = idx[ j ];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\ttmp.push( arr[ i ][ k ] );\n\t\t}\n\t\tout.push( tmp );\n\t}\n\treturn out;\n}\n\n// EXPORTS //\n\nexport default unzip;\n"],"names":["unzip","arr","idx","numVals","len","out","tmp","i","j","k","isArray","TypeError","format","length","arguments","isInteger","Error","push"],"mappings":";;uRAoDA,SAASA,EAAOC,EAAKC,GACpB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAST,GACd,MAAM,IAAIU,UAAWC,EAAO,UAG7B,IADAR,EAAMH,EAAIY,OACJN,EAAI,EAAGA,EAAIH,EAAKG,IACrB,IAAMG,EAAST,EAAIM,IAClB,MAAM,IAAII,UAAWC,EAAO,UAK9B,GADAT,EAAUF,EAAK,GAAIY,OACdC,UAAUD,OAAS,EAAI,CAC3B,IAAMH,EAASR,GACd,MAAM,IAAIS,UAAWC,EAAO,UAE7B,IAAML,EAAI,EAAGA,EAAIL,EAAIW,OAAQN,IAAM,CAElC,GADAE,EAAIP,EAAKK,IACHQ,EAAWN,GAChB,MAAM,IAAIE,UAAWC,EAAO,UAE7B,GAAKH,EAAI,GAAKA,EAAIN,EACjB,MAAM,IAAIa,MAAOJ,EAAO,SAEzB,CACDT,EAAUD,EAAIW,MAChB,MAEE,IADAX,EAAM,GACAK,EAAI,EAAGA,EAAIJ,EAASI,IACzBL,EAAIe,KAAMV,GAIZ,IADAF,EAAM,GACAG,EAAI,EAAGA,EAAIL,EAASK,IAAM,CAG/B,IAFAF,EAAM,GACNG,EAAIP,EAAKM,GACHD,EAAI,EAAGA,EAAIH,EAAKG,IACrBD,EAAIW,KAAMhB,EAAKM,GAAKE,IAErBJ,EAAIY,KAAMX,EACV,CACD,OAAOD,CACR"}