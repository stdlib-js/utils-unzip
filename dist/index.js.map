{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/assert-is-integer' );\nvar isArray = require( '@stdlib/assert-is-array' );\n\n\n// MAIN //\n\n/**\n* Unzips a zipped array (i.e., a nested array of tuples).\n*\n* @param {Array} arr - zipped array\n* @param {Array} [idx] - array of indices specifying which tuple elements to unzip\n* @throws {TypeError} first argument must be a zipped array\n* @throws {TypeError} second argument must be an array of integer indices\n* @throws {Error} indices must be on the interval from zero to the tuple length\n* @returns {Array} array of unzipped arrays\n*\n* @example\n* var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n*\n* var out = unzip( arr );\n* // returns [ [ 1, 2 ], [ 'a', 'b' ], [ 3, 4 ] ]\n*\n* @example\n* var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n*\n* var out = unzip( arr, [ 0, 2 ] );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*/\nfunction unzip( arr, idx ) {\n\tvar numVals;\n\tvar len;\n\tvar out;\n\tvar tmp;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( !isArray( arr ) ) {\n\t\tthrow new TypeError( 'invalid argument. Must provide a zipped array.' );\n\t}\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( !isArray( arr[i] ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Array must only contain arrays.' );\n\t\t}\n\t}\n\t// Assume that the first tuple is representative of all tuples...\n\tnumVals = arr[ 0 ].length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isArray( idx ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Indices must be specified as an array.' );\n\t\t}\n\t\tfor ( i = 0; i < idx.length; i++ ) {\n\t\t\tk = idx[ i ];\n\t\t\tif ( !isInteger( k ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. All indices must be integers.' );\n\t\t\t}\n\t\t\tif ( k < 0 || k > numVals ) {\n\t\t\t\tthrow new Error( 'invalid argument. Must provide valid indices (i.e., must be a nonnegative integer less than or equal to the tuple length).' );\n\t\t\t}\n\t\t}\n\t\tnumVals = idx.length;\n\t} else {\n\t\tidx = [];\n\t\tfor ( i = 0; i < numVals; i++ ) {\n\t\t\tidx.push( i );\n\t\t}\n\t}\n\tout = [];\n\tfor ( j = 0; j < numVals; j++ ) {\n\t\ttmp = [];\n\t\tk = idx[ j ];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\ttmp.push( arr[ i ][ k ] );\n\t\t}\n\t\tout.push( tmp );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unzip;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Unzip a zipped array (i.e., a nested array of tuples).\n*\n* @module @stdlib/utils-unzip\n*\n* @example\n* var unzip = require( '@stdlib/utils-unzip' );\n*\n* var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n* var out = unzip( arr );\n* // returns [ [ 1, 2 ], [ 'a', 'b' ], [ 3, 4 ] ]\n*\n* arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n* out = unzip( arr, [ 0, 2 ] );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAY,QAAS,2BAA4B,EACjDC,EAAU,QAAS,yBAA0B,EA2BjD,SAASC,EAAOC,EAAKC,EAAM,CAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAACV,EAASE,CAAI,EAClB,MAAM,IAAI,UAAW,gDAAiD,EAGvE,IADAG,EAAMH,EAAI,OACJM,EAAI,EAAGA,EAAIH,EAAKG,IACrB,GAAK,CAACR,EAASE,EAAIM,CAAC,CAAE,EACrB,MAAM,IAAI,UAAW,mDAAoD,EAK3E,GADAJ,EAAUF,EAAK,CAAE,EAAE,OACd,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACF,EAASG,CAAI,EAClB,MAAM,IAAI,UAAW,0DAA2D,EAEjF,IAAMK,EAAI,EAAGA,EAAIL,EAAI,OAAQK,IAAM,CAElC,GADAE,EAAIP,EAAKK,CAAE,EACN,CAACT,EAAWW,CAAE,EAClB,MAAM,IAAI,UAAW,iDAAkD,EAExE,GAAKA,EAAI,GAAKA,EAAIN,EACjB,MAAM,IAAI,MAAO,4HAA6H,CAEhJ,CACAA,EAAUD,EAAI,MACf,KAEC,KADAA,EAAM,CAAC,EACDK,EAAI,EAAGA,EAAIJ,EAASI,IACzBL,EAAI,KAAMK,CAAE,EAId,IADAF,EAAM,CAAC,EACDG,EAAI,EAAGA,EAAIL,EAASK,IAAM,CAG/B,IAFAF,EAAM,CAAC,EACPG,EAAIP,EAAKM,CAAE,EACLD,EAAI,EAAGA,EAAIH,EAAKG,IACrBD,EAAI,KAAML,EAAKM,CAAE,EAAGE,CAAE,CAAE,EAEzBJ,EAAI,KAAMC,CAAI,CACf,CACA,OAAOD,CACR,CAKAR,EAAO,QAAUG,IClEjB,IAAIU,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isInteger", "isArray", "unzip", "arr", "idx", "numVals", "len", "out", "tmp", "i", "j", "k", "main"]
}
